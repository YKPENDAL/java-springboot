plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id 'jacoco'
    id "com.palantir.docker" version "0.25.0"
    id "com.palantir.docker-run" version "0.25.0"
    id 'org.sonarqube' version '3.3'
}

group = 'com.in.service.core'
version = '2.1.0-b'
sourceCompatibility = '15'

repositories {
    mavenCentral()
        
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/itest/java')
        }
        resources.srcDir file('src/itest/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

ext {
    set('testcontainersVersion', "1.14.3")
    set('springCloudVersion', "2021.0.3")
}

dependencies {
    compileOnly group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.5.2'
    compileOnly group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    implementation 'org.apache.commons:commons-csv:1.9.0'
    implementation files('lib/in-common-lib.jar')
    implementation files('lib/ccavutil.jar')
    implementation (
            'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client',
            'org.springframework.cloud:spring-cloud-starter-openfeign',
            'org.springframework.cloud:spring-cloud-starter-sleuth',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-freemarker',
            'org.springdoc:springdoc-openapi-ui:1.4.6',
            'io.jsonwebtoken:jjwt:0.9.0',
            'org.springframework.boot:spring-boot-starter-mail:2.6.3',
            'com.itextpdf:itextpdf:5.5.13.3',
            'org.apache.commons:commons-text:1.10.0'
    )
    implementation group: 'com.google.firebase', name: 'firebase-admin', version: '9.2.0'

    implementation "com.razorpay:razorpay-java:1.4.3"
    implementation "com.paytm.pg:paytm-checksum:1.2.1"

    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.0'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'

    runtimeOnly('mysql:mysql-connector-java')

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'org.mockito', module :'mockito-core'
    }
    testImplementation 'org.mockito:mockito-inline:4.6.1'
    testImplementation 'org.testcontainers:junit-jupiter'


    integrationTestCompile 'org.springframework.boot:spring-boot-starter-test'

    integrationTestImplementation files('lib/in-common-lib.jar')
    integrationTestImplementation(
            'org.springdoc:springdoc-openapi-ui:1.5.2',
            'org.springframework.boot:spring-boot-starter-test',
            'org.testcontainers:junit-jupiter',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.cloud:spring-cloud-starter-sleuth',
            'io.jsonwebtoken:jjwt:0.9.0',
            'org.springframework.boot:spring-boot-starter-mail:2.6.3',
            'org.springframework.boot:spring-boot-starter-thymeleaf',
            'io.rest-assured:rest-assured:4.2.1',
            'io.rest-assured:json-path:4.2.1',
            'io.rest-assured:xml-path:4.2.1',
            'io.rest-assured:json-schema-validator:4.2.1',
            'org.modelmapper:modelmapper:3.1.0',
            'mysql:mysql-connector-java',
            'org.springframework.cloud:spring-cloud-starter-openfeign',
            'org.springframework.cloud:spring-cloud-starter-loadbalancer',
            'org.springdoc:springdoc-openapi-ui:1.5.2',
            'com.itextpdf:itextpdf:5.5.13.2',
            'org.apache.commons:commons-text:1.9',
            'org.springframework.boot:spring-boot-starter-freemarker',
    )
    integrationTestImplementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.0'
	
    integrationTestRuntime(
            'mysql:mysql-connector-java',
            'org.apache.httpcomponents:httpclient:4.5.13'
    )
    

}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

sonarqube {
    properties {
        property 'sonar.login', project.hasProperty('sonar.login') ? project['sonar.login'] : ''
        property 'sonar.host.url', 'http://192.168.1.78:9000'
        property 'sonar.projectKey', 'CORE'
        property 'sonar.projectName', 'CORE Service'
        property 'sonar.projectVersion', '1.0'
    }
}

tasks.named('sonarqube').configure {
    dependsOn jacocoTestReport
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }

    testLogging {
        events 'PASSED', 'STARTED', 'FAILED', 'SKIPPED'
    }


}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

jacocoTestReport {
    reports {
        xml.required = true
    }
    dependsOn test
}

task jenkinsProps {
    doLast {
        println "PROJECT_NAME=icoreservice"
        println "PROJECT_VERSION=${version}"
    }
}

docker {
    name "${project.name}:${project.version}"
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
    name "${project.name}"
    image "${project.name}:${project.version}"
    ports '8081:8081'
    clean true
}
